version: 0.2

# 

phases:
  install:
    on-failure: RETRY
    runtime-versions:
      nodejs: 20.15.1
  pre_build:
    on-failure: RETRY
    commands:
      - echo "Installing npm dependencies"
      - npm ci
      - echo "Skipping tests for now"
      #- npm test
      - echo "Downloading Firebase service account key from S3"
      - aws s3 cp s3://privatebucketforatphoto/atphotobackend-b9d66802c105.json ./atphotobackend-b9d66802c105.json
      - aws s3 cp s3://privatebucketforatphoto/postgres_pass.txt postgres_pass.txt
      - aws s3 cp s3://privatebucketforatphoto/add_imgs_api_key.txt add_imgs_api_key.txt
      - aws s3 cp s3://privatebucketforatphoto/us-east-2-bundle.pem us-east-2-bundle.pem

      - echo "Logging into AWS ECR"
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    on-failure: ABORT
    commands:
      - echo "Building the application"
      - npm run build
      - echo "Building the Docker image and tagging"
      - docker build --no-cache -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    on-failure: RETRY
    commands:
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image to ECR"
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      

#report:
#  report-tests:
#    files:
#      # location of test result output

artifacts:
  files:
    - appspec.yml
    - scripts/**/*
    - atphotobackend-b9d66802c105.json
    - postgres_pass.txt
    - add_imgs_api_key.txt
    - us-east-2-bundle.pem
  base-directory: .
  discard-paths: false
